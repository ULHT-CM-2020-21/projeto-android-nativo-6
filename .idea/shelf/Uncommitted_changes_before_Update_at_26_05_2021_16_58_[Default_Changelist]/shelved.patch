Index: app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/repositories/TesteCovidRepositry.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.deisi.a2020.cm.g6.data.repositories\r\n\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.local.room.dao.TesteCovidDao\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.local.room.entities.TesteCovid\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.callback.TesteCovidCallback\r\n\r\n\r\nclass TesteCovidRepositry(private val local: TesteCovidDao) {\r\n\r\n    /*fun getTesteCovidData(callback: TesteCovidCallback, *//*callbackDashboard: DashboardCallback,*//* data: String){\r\n        CoroutineScope(Dispatchers.IO ).launch {\r\n            var listaDeTestesCovid = mutableListOf<TesteCovid>()\r\n            val dados = local.getById(data)\r\n            if(dados != null){\r\n\r\n                callback.getTesteCovidData(dados)\r\n                //preciso de callback para a lista em si? ou no detalhe do teste em si?...\r\n            } else {\r\n\r\n            }\r\n        }\r\n\r\n    }*/\r\n    //fica para depois...\r\n\r\n    fun getListTestesCovid(): List<TesteCovid> {\r\n        return local.getAll()\r\n    }\r\n\r\n    fun saveTesteCovid(testeCovid: TesteCovid) {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            local.insert(testeCovid)\r\n        }\r\n    }\r\n\r\n    //#TODO APAGAR ESTE METODO\r\n    fun deleteAllFromDB() {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            local.deleteAllWARNING()\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/repositories/TesteCovidRepositry.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
+++ app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/repositories/TesteCovidRepositry.kt	(date 1622044511183)
@@ -6,10 +6,10 @@
 import pt.ulusofona.deisi.a2020.cm.g6.data.local.room.dao.TesteCovidDao
 import pt.ulusofona.deisi.a2020.cm.g6.data.local.room.entities.TesteCovid
 import pt.ulusofona.deisi.a2020.cm.g6.ui.callback.TesteCovidCallback
+import pt.ulusofona.deisi.a2020.cm.g6.ui.listener.FetchRepositoryListaListener
 
 
 class TesteCovidRepositry(private val local: TesteCovidDao) {
-
     /*fun getTesteCovidData(callback: TesteCovidCallback, *//*callbackDashboard: DashboardCallback,*//* data: String){
         CoroutineScope(Dispatchers.IO ).launch {
             var listaDeTestesCovid = mutableListOf<TesteCovid>()
@@ -26,8 +26,8 @@
     }*/
     //fica para depois...
 
-    fun getListTestesCovid(): List<TesteCovid> {
-        return local.getAll()
+    fun getListTestesCovid(listener: FetchRepositoryListaListener){
+        listener.onFetchedRepository(local.getAll())
     }
 
     fun saveTesteCovid(testeCovid: TesteCovid) {
Index: app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/repositories/CovidRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.deisi.a2020.cm.g6.data.repositories\r\n\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.local.room.dao.CovidDao\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.local.room.entities.Covid\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.remote.services.CovidService\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.listener.FetchRepositoryCovidListener\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.listener.FetchRepositoryGraficoListener\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.utils.Grafico\r\nimport retrofit2.Retrofit\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\nclass CovidRepository(private val local: CovidDao, private val remote: Retrofit) {\r\n\r\n    private lateinit var listenerCovid: FetchRepositoryCovidListener\r\n    private lateinit var listenerGraficos: FetchRepositoryGraficoListener\r\n\r\n\r\n    fun check15DaysData() {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            val service = remote.create(CovidService::class.java)\r\n            // confirmar se tenho na bd pelo menos 15 dias de dados\r\n            for (i in 16 downTo 1) {\r\n                var dadosBD = local.getByDate(getDaysAgo(i))\r\n                if (dadosBD == null) {\r\n                    val response = service.getDadosDiaEspecifico(getDaysAgo(i))\r\n                    if (response.isSuccessful) {\r\n\r\n                        var covidManyDays = Covid(getDaysAgo(i))\r\n\r\n                        val numberCovidTotal = daysBetween(getDaysAgo(i)).toString()\r\n\r\n                        covidManyDays.confirmadosTotais =\r\n                            response.body()?.confirmados?.get(numberCovidTotal)!!\r\n                        covidManyDays.internadosTotais =\r\n                            response.body()?.internados?.get(numberCovidTotal)!!\r\n                        covidManyDays.obitosTotais =\r\n                            response.body()?.obitos?.get(numberCovidTotal)!!\r\n                        covidManyDays.recuperadosTotais =\r\n                            response.body()?.recuperados?.get(numberCovidTotal)!!\r\n\r\n                        covidManyDays.norteTotal =\r\n                            response.body()?.confirmados_arsnorte?.get(numberCovidTotal)!!\r\n                        covidManyDays.centroTotal =\r\n                            response.body()?.confirmados_arscentro?.get(numberCovidTotal)!!\r\n                        covidManyDays.lisboaTotal =\r\n                            response.body()?.confirmados_arslvt?.get(numberCovidTotal)!!\r\n                        covidManyDays.alentejoTotal =\r\n                            response.body()?.confirmados_arsalentejo?.get(numberCovidTotal)!!\r\n                        covidManyDays.algarveTotal =\r\n                            response.body()?.confirmados_arsalgarve?.get(numberCovidTotal)!!\r\n                        covidManyDays.acoresTotal =\r\n                            response.body()?.confirmados_acores?.get(numberCovidTotal)!!\r\n                        covidManyDays.madeiraTotal =\r\n                            response.body()?.confirmados_madeira?.get(numberCovidTotal)!!\r\n\r\n                        local.insert(covidManyDays)\r\n                    }\r\n                }\r\n            }\r\n            for (i in 15 downTo 0) {\r\n                var atualCovid = local.getByDate(getDaysAgo(i))\r\n                var antigoCovid = local.getByDate(getDaysAgo(i + 1))\r\n                if (atualCovid != null && antigoCovid != null) {\r\n                    atualCovid = calcularDadosCovidEntreDatas(atualCovid!!, antigoCovid!!)\r\n                    local.updateByDate24h(\r\n                        atualCovid.confirmados24,\r\n                        atualCovid.recuperados24,\r\n                        atualCovid.internados24,\r\n                        atualCovid.obitos24,\r\n                        atualCovid.data\r\n                    )\r\n                }\r\n            }\r\n            var covidHoje = local.getByDate(getDaysAgo(0))\r\n            if (covidHoje == null) {\r\n                val response = service.getDadosDiaEspecifico(getDaysAgo(0))\r\n                if (response.isSuccessful) {\r\n\r\n                    var covidManyDays = Covid(getDaysAgo(0))\r\n\r\n                    val numberCovidTotal = daysBetween(getDaysAgo(0)).toString()\r\n\r\n                    covidManyDays.confirmadosTotais =\r\n                        response.body()?.confirmados?.get(numberCovidTotal)!!\r\n                    covidManyDays.internadosTotais =\r\n                        response.body()?.internados?.get(numberCovidTotal)!!\r\n                    covidManyDays.obitosTotais = response.body()?.obitos?.get(numberCovidTotal)!!\r\n                    covidManyDays.recuperadosTotais =\r\n                        response.body()?.recuperados?.get(numberCovidTotal)!!\r\n\r\n                    covidManyDays.norteTotal =\r\n                        response.body()?.confirmados_arsnorte?.get(numberCovidTotal)!!\r\n                    covidManyDays.centroTotal =\r\n                        response.body()?.confirmados_arscentro?.get(numberCovidTotal)!!\r\n                    covidManyDays.lisboaTotal =\r\n                        response.body()?.confirmados_arslvt?.get(numberCovidTotal)!!\r\n                    covidManyDays.alentejoTotal =\r\n                        response.body()?.confirmados_arsalentejo?.get(numberCovidTotal)!!\r\n                    covidManyDays.algarveTotal =\r\n                        response.body()?.confirmados_arsalgarve?.get(numberCovidTotal)!!\r\n                    covidManyDays.acoresTotal =\r\n                        response.body()?.confirmados_acores?.get(numberCovidTotal)!!\r\n                    covidManyDays.madeiraTotal =\r\n                        response.body()?.confirmados_madeira?.get(numberCovidTotal)!!\r\n\r\n                    var antigoCovid = local.getByDate(getDaysAgo(1))\r\n                    covidManyDays = calcularDadosCovidEntreDatas(covidManyDays, antigoCovid!!)\r\n                    local.updateByDate24h(\r\n                        covidManyDays.confirmados24,\r\n                        covidManyDays.recuperados24,\r\n                        covidManyDays.internados24,\r\n                        covidManyDays.obitos24,\r\n                        covidManyDays.data\r\n                    )\r\n\r\n\r\n                    var grafico = Grafico()\r\n                    var listaConfirmados = mutableListOf<Int>()\r\n                    var listaRecuperados = mutableListOf<Int>()\r\n                    var listaInternados = mutableListOf<Int>()\r\n                    var listaObitos = mutableListOf<Int>()\r\n\r\n                    for (i in 0..14) {\r\n                        var covid = local.getByDate(getDaysAgo(i))\r\n                        listaConfirmados.add(covid!!.confirmados24)\r\n                        listaRecuperados.add(covid!!.recuperados24)\r\n                        if (covid!!.internados24 < 0) {\r\n                            listaInternados.add(0)\r\n                        } else {\r\n                            listaInternados.add(covid!!.internados24)\r\n                        }\r\n                        listaObitos.add(covid!!.obitos24)\r\n                    }\r\n\r\n                    grafico.fromToday = true\r\n\r\n                    grafico.valuesConfirmados = listaConfirmados\r\n                    grafico.valuesRecuperados = listaRecuperados\r\n                    grafico.valuesInternados = listaInternados\r\n                    grafico.valuesObitos = listaObitos\r\n\r\n                    grafico.maxConfirmados = getMaxList(listaConfirmados)\r\n                    grafico.maxRecuperados = getMaxList(listaRecuperados)\r\n                    grafico.maxInternados = getMaxList(listaInternados)\r\n                    grafico.maxObitos = getMaxList(listaObitos)\r\n\r\n                    listenerGraficos.onFetchedRepository(grafico)\r\n                } else {\r\n                    var grafico = Grafico()\r\n                    var listaConfirmados = mutableListOf<Int>()\r\n                    var listaRecuperados = mutableListOf<Int>()\r\n                    var listaInternados = mutableListOf<Int>()\r\n                    var listaObitos = mutableListOf<Int>()\r\n\r\n                    for (i in 1..15) {\r\n                        var covid = local.getByDate(getDaysAgo(i))\r\n                        listaConfirmados.add(covid!!.confirmados24)\r\n                        listaRecuperados.add(covid!!.recuperados24)\r\n                        if (covid!!.internados24 < 0) {\r\n                            listaInternados.add(0)\r\n                        } else {\r\n                            listaInternados.add(covid!!.internados24)\r\n                        }\r\n                        listaObitos.add(covid!!.obitos24)\r\n                    }\r\n\r\n                    grafico.fromToday = false\r\n\r\n                    grafico.valuesConfirmados = listaConfirmados\r\n                    grafico.valuesRecuperados = listaRecuperados\r\n                    grafico.valuesInternados = listaInternados\r\n                    grafico.valuesObitos = listaObitos\r\n\r\n                    grafico.maxConfirmados = getMaxList(listaConfirmados)\r\n                    grafico.maxRecuperados = getMaxList(listaRecuperados)\r\n                    grafico.maxInternados = getMaxList(listaInternados)\r\n                    grafico.maxObitos = getMaxList(listaObitos)\r\n\r\n                    listenerGraficos.onFetchedRepository(grafico)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getMaxList(lista: List<Int>): Int {\r\n        var max = 0;\r\n        for (i in lista) {\r\n            if (i > max) {\r\n                max = i\r\n            }\r\n        }\r\n        return max\r\n    }\r\n\r\n    // Confirma que temos pelo menos 2 dias de dados para desenhar dashboard\r\n    fun checkBDLastUpdates() {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            val service = remote.create(CovidService::class.java)\r\n\r\n            var bdOneDayAgo = local.getByDate(getDaysAgo(1))\r\n            var bdTwoDayAgo = local.getByDate(getDaysAgo(2))\r\n\r\n            if (bdOneDayAgo == null) {\r\n                val response = service.getDadosDiaEspecifico(getDaysAgo(1))\r\n                if (response.isSuccessful) {\r\n\r\n                    var covidOneDayAgo = Covid(getDaysAgo(1))\r\n                    val numberCovidTotal = daysBetween(getDaysAgo(1)).toString()\r\n                    println(numberCovidTotal)\r\n                    println(response)\r\n                    println(response.body()?.confirmados)\r\n                    println(numberCovidTotal)\r\n                    println(response.body()?.confirmados?.get(numberCovidTotal)!!)\r\n\r\n                    covidOneDayAgo.confirmadosTotais =\r\n                        response.body()?.confirmados?.get(numberCovidTotal)!!\r\n                    covidOneDayAgo.recuperadosTotais =\r\n                        response.body()?.recuperados?.get(numberCovidTotal)!!\r\n                    covidOneDayAgo.obitosTotais = response.body()?.obitos?.get(numberCovidTotal)!!\r\n                    covidOneDayAgo.internadosTotais =\r\n                        response.body()?.internados?.get(numberCovidTotal)!!\r\n\r\n                    covidOneDayAgo.norteTotal =\r\n                        response.body()?.confirmados_arsnorte?.get(numberCovidTotal)!!\r\n                    covidOneDayAgo.centroTotal =\r\n                        response.body()?.confirmados_arscentro?.get(numberCovidTotal)!!\r\n                    covidOneDayAgo.lisboaTotal =\r\n                        response.body()?.confirmados_arslvt?.get(numberCovidTotal)!!\r\n                    covidOneDayAgo.alentejoTotal =\r\n                        response.body()?.confirmados_arsalentejo?.get(numberCovidTotal)!!\r\n                    covidOneDayAgo.algarveTotal =\r\n                        response.body()?.confirmados_arsalgarve?.get(numberCovidTotal)!!\r\n                    covidOneDayAgo.madeiraTotal =\r\n                        response.body()?.confirmados_madeira?.get(numberCovidTotal)!!\r\n                    covidOneDayAgo.acoresTotal =\r\n                        response.body()?.confirmados_acores?.get(numberCovidTotal)!!\r\n\r\n                    local.insert(covidOneDayAgo)\r\n                }\r\n            }\r\n\r\n            if (bdTwoDayAgo == null) {\r\n                val response = service.getDadosDiaEspecifico(getDaysAgo(2))\r\n                if (response.isSuccessful) {\r\n\r\n                    var covidTwoDayAgo = Covid(getDaysAgo(2))\r\n                    val numberCovidTotal = daysBetween(getDaysAgo(2)).toString()\r\n\r\n                    println(numberCovidTotal)\r\n                    println(response)\r\n                    println(response.body()?.confirmados)\r\n                    println(numberCovidTotal)\r\n                    println(response.body()?.confirmados?.get(numberCovidTotal)!!)\r\n                    covidTwoDayAgo.confirmadosTotais =\r\n                        response.body()?.confirmados?.get(numberCovidTotal)!!\r\n                    covidTwoDayAgo.recuperadosTotais =\r\n                        response.body()?.recuperados?.get(numberCovidTotal)!!\r\n                    covidTwoDayAgo.obitosTotais = response.body()?.obitos?.get(numberCovidTotal)!!\r\n                    covidTwoDayAgo.internadosTotais =\r\n                        response.body()?.internados?.get(numberCovidTotal)!!\r\n\r\n                    covidTwoDayAgo.norteTotal =\r\n                        response.body()?.confirmados_arsnorte?.get(numberCovidTotal)!!\r\n                    covidTwoDayAgo.centroTotal =\r\n                        response.body()?.confirmados_arscentro?.get(numberCovidTotal)!!\r\n                    covidTwoDayAgo.lisboaTotal =\r\n                        response.body()?.confirmados_arslvt?.get(numberCovidTotal)!!\r\n                    covidTwoDayAgo.alentejoTotal =\r\n                        response.body()?.confirmados_arsalentejo?.get(numberCovidTotal)!!\r\n                    covidTwoDayAgo.algarveTotal =\r\n                        response.body()?.confirmados_arsalgarve?.get(numberCovidTotal)!!\r\n                    covidTwoDayAgo.madeiraTotal =\r\n                        response.body()?.confirmados_madeira?.get(numberCovidTotal)!!\r\n                    covidTwoDayAgo.acoresTotal =\r\n                        response.body()?.confirmados_acores?.get(numberCovidTotal)!!\r\n\r\n                    local.insert(covidTwoDayAgo)\r\n                }\r\n            }\r\n            checkLastRemoteUpdate()\r\n        }\r\n    }\r\n\r\n    // confirma qual os dados mais recente das API\r\n    fun checkLastRemoteUpdate() {\r\n        val service = remote.create(CovidService::class.java)\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            var responseHoje = service.getDadosDia()\r\n            if (responseHoje.isSuccessful && responseHoje.body()?.data == getDaysAgo(0)) {\r\n                var covidHoje = Covid(getDaysAgo(0))\r\n                covidHoje.confirmadosTotais = responseHoje.body()?.confirmados!!\r\n                covidHoje.recuperadosTotais = responseHoje.body()?.recuperados!!\r\n                covidHoje.obitosTotais = responseHoje.body()?.obitos!!\r\n                covidHoje.internadosTotais = responseHoje.body()?.internados!!\r\n\r\n                covidHoje.norteTotal = responseHoje.body()?.confirmados_arsnorte!!\r\n                covidHoje.centroTotal = responseHoje.body()?.confirmados_arscentro!!\r\n                covidHoje.lisboaTotal = responseHoje.body()?.confirmados_arslvt!!\r\n                covidHoje.alentejoTotal = responseHoje.body()?.confirmados_arsalentejo!!\r\n                covidHoje.algarveTotal = responseHoje.body()?.confirmados_arsalgarve!!\r\n                covidHoje.madeiraTotal = responseHoje.body()?.confirmados_madeira!!\r\n                covidHoje.acoresTotal = responseHoje.body()?.confirmados_acores!!\r\n\r\n                var covidOntem = local.getByDate(getDaysAgo(1))\r\n\r\n                if (covidOntem != null) {\r\n                    covidHoje = calcularDadosCovidEntreDatas(covidHoje, covidOntem)\r\n                    listenerCovid.onFetchedRepository(covidHoje)\r\n                }\r\n\r\n\r\n            } else {\r\n                var covidOntem = local.getByDate(getDaysAgo(1))\r\n                var covidDoisDias = local.getByDate(getDaysAgo(2))\r\n                if (covidOntem != null && covidDoisDias != null) {\r\n                    covidOntem = calcularDadosCovidEntreDatas(covidOntem, covidDoisDias)\r\n                    listenerCovid.onFetchedRepository(covidOntem)\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    // Calcular dados entre duas datas (Covid 24 horas)\r\n    fun calcularDadosCovidEntreDatas(covidAtual: Covid, covidAntigo: Covid): Covid {\r\n\r\n        covidAtual.confirmados24 =\r\n            (covidAtual.confirmadosTotais?.minus(covidAntigo.confirmadosTotais)!!)\r\n        covidAtual.internados24 =\r\n            (covidAtual.internadosTotais?.minus(covidAntigo.internadosTotais)!!)\r\n        covidAtual.obitos24 = (covidAtual.obitosTotais?.minus(covidAntigo.obitosTotais))!!\r\n        covidAtual.recuperados24 =\r\n            (covidAtual.recuperadosTotais?.minus(covidAntigo.recuperadosTotais))!!\r\n\r\n        covidAtual.norte24 = (covidAtual.norteTotal?.minus(covidAntigo.norteTotal))!!\r\n        covidAtual.centro24 = (covidAtual.centroTotal?.minus(covidAntigo.centroTotal))!!\r\n        covidAtual.lisboa24 = (covidAtual.lisboaTotal?.minus(covidAntigo.lisboaTotal))!!\r\n        covidAtual.alentejo24 = (covidAtual.alentejoTotal?.minus(covidAntigo.alentejoTotal))!!\r\n        covidAtual.algarve24 = (covidAtual.algarveTotal?.minus(covidAntigo.algarveTotal))!!\r\n        covidAtual.acores24 = (covidAtual.acoresTotal?.minus(covidAntigo.acoresTotal))!!\r\n        covidAtual.madeira24 = (covidAtual.madeiraTotal?.minus(covidAntigo.madeiraTotal))!!\r\n\r\n        return covidAtual\r\n    }\r\n\r\n    // Main function to Dashboard\r\n    fun getCovidData(callback: FetchRepositoryCovidListener) {\r\n        listenerCovid = callback\r\n        checkBDLastUpdates()\r\n    }\r\n\r\n    fun getDaysAgo(daysAgo: Int): String {\r\n        val calendar = Calendar.getInstance()\r\n        calendar.add(Calendar.DAY_OF_YEAR, -daysAgo)\r\n        return SimpleDateFormat(\"dd-MM-yyyy\").format(calendar.time)\r\n    }\r\n\r\n    fun daysBetween(date: String): Long {\r\n        val cal1 = Calendar.getInstance()\r\n        val cal2 = Calendar.getInstance()\r\n\r\n        val sdf = SimpleDateFormat(\"dd-MM-yyyy\", Locale.ENGLISH)\r\n        cal2.setTime(sdf.parse(date))\r\n\r\n\r\n        cal1[2020, Calendar.FEBRUARY] = 26\r\n\r\n        val millis1 = cal1.timeInMillis\r\n        val millis2 = cal2.timeInMillis\r\n        val diff = millis2 - millis1\r\n\r\n        val diffDays = diff / (24 * 60 * 60 * 1000)\r\n        return diffDays + 1\r\n    }\r\n\r\n    fun get15DaysDataGraph(listener: FetchRepositoryGraficoListener) {\r\n        listenerGraficos = listener\r\n        check15DaysData()\r\n    }\r\n\r\n\r\n    //#TODO APAGAR ESTE METODO\r\n    fun deleteAllFromDB() {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            local.deleteAllWARNING()\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/repositories/CovidRepository.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
+++ app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/repositories/CovidRepository.kt	(date 1622039687149)
@@ -220,7 +220,8 @@
                         response.body()?.confirmados?.get(numberCovidTotal)!!
                     covidOneDayAgo.recuperadosTotais =
                         response.body()?.recuperados?.get(numberCovidTotal)!!
-                    covidOneDayAgo.obitosTotais = response.body()?.obitos?.get(numberCovidTotal)!!
+                    covidOneDayAgo.obitosTotais =
+                        response.body()?.obitos?.get(numberCovidTotal)!!
                     covidOneDayAgo.internadosTotais =
                         response.body()?.internados?.get(numberCovidTotal)!!
 
Index: app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/ui/listaTestes/ListaTestesViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.deisi.a2020.cm.g6.ui.listaTestes\r\n\r\nimport android.app.Application\r\nimport androidx.lifecycle.AndroidViewModel\r\n\r\nclass ListaTestesViewModel (application: Application): AndroidViewModel(application){\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/ui/listaTestes/ListaTestesViewModel.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
+++ app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/ui/listaTestes/ListaTestesViewModel.kt	(date 1622044511142)
@@ -2,6 +2,49 @@
 
 import android.app.Application
 import androidx.lifecycle.AndroidViewModel
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import pt.ulusofona.deisi.a2020.cm.g6.data.local.room.TesteCovidDatabase
+import pt.ulusofona.deisi.a2020.cm.g6.data.local.room.entities.TesteCovid
+import pt.ulusofona.deisi.a2020.cm.g6.data.repositories.TesteCovidRepositry
+import pt.ulusofona.deisi.a2020.cm.g6.domain.listaTestes.ListaTestesLogic
+import pt.ulusofona.deisi.a2020.cm.g6.ui.listener.FetchListaListener
+import pt.ulusofona.deisi.a2020.cm.g6.ui.listener.ListaUIListener
+
+class ListaTestesViewModel (application: Application): AndroidViewModel(application), FetchListaListener{
+
+    private val storage = TesteCovidDatabase.getInstance(application).testeCovidDao()
+    private val repository =  TesteCovidRepositry(storage)
+    private val listaLogic = ListaTestesLogic(repository)
+    private var listeners = mutableListOf<ListaUIListener>()
+
+    fun drawLista(){
+        listaLogic.registerListener(this)
+        CoroutineScope(Dispatchers.IO).launch {
+            listaLogic.askListaData()
+        }
+    }
+
+    fun registerListener(listener: ListaUIListener){
+        listeners.add(listener)
+    }
+
+    fun unregisterListener(listener: ListaUIListener){
+        listeners.remove(listener)
+    }
+
+    fun notifyListener(listaTestes: List<TesteCovid>){
+        for(i in listeners){
+            i.onUpdateUI(listaTestes)
+        }
+    }
+
+    override fun onDataFetched(listaTestes: List<TesteCovid>) {
+        CoroutineScope(Dispatchers.Main).launch {
+            notifyListener(listaTestes)
+        }
+    }
 
-class ListaTestesViewModel (application: Application): AndroidViewModel(application){
+
 }
\ No newline at end of file
Index: app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/ui/listaTestes/ListaTestesFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.deisi.a2020.cm.g6.ui.listaTestes\r\n\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProviders\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport butterknife.ButterKnife\r\nimport kotlinx.android.synthetic.main.fragment_lista_testes.*\r\n\r\nimport pt.ulusofona.deisi.a2020.cm.g6.R\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.local.list.TesteSource\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.MainActivity\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.adapters.TestAdapter\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.utils.NavigationManager\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.utils.RecyclerItemClickListener\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.local.room.entities.TesteCovid\r\nimport java.util.*\r\n\r\n\r\nclass ListaTestesFragment : Fragment() {\r\n    private lateinit var viewModel: ListaTestesViewModel\r\n    private var testAdapter: TestAdapter? = null\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view = inflater.inflate(R.layout.fragment_lista_testes, container, false)\r\n        viewModel = ViewModelProviders.of(this).get(ListaTestesViewModel::class.java)\r\n        ButterKnife.bind(this, view)\r\n        return view\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        val listaOrdenada = TesteSource.getAllTeste()\r\n        var imagemOrdenar = true\r\n\r\n        list_test.layoutManager = LinearLayoutManager(context as MainActivity)\r\n        list_test.adapter = TestAdapter(\r\n            context as MainActivity,\r\n            R.layout.teste_item_expression,\r\n            listaOrdenada as ArrayList<TesteCovid>\r\n        )\r\n        list_test.addOnItemTouchListener(\r\n            RecyclerItemClickListener(\r\n                context,\r\n                list_test,\r\n                object : RecyclerItemClickListener.OnItemClickListener {\r\n                    override fun onItemClick(view: View?, position: Int) {\r\n                        activity?.let {\r\n                            NavigationManager.goToTest(\r\n                                it.supportFragmentManager, listaOrdenada.elementAt(\r\n                                    position\r\n                                )\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                    override fun onLongItemClick(view: View?, position: Int) {\r\n                        // do whatever\r\n                    }\r\n                })\r\n        )\r\n\r\n\r\n\r\n\r\n        ordenar_lista.setOnClickListener {\r\n            listaOrdenada.reverse()\r\n            list_test.layoutManager = LinearLayoutManager(context as MainActivity)\r\n            list_test.adapter = TestAdapter(\r\n                context as MainActivity,\r\n                R.layout.teste_item_expression,\r\n                listaOrdenada\r\n            )\r\n            if (imagemOrdenar) {\r\n                ordenar_lista.setImageResource(R.drawable.ordenar_crescente)\r\n                imagemOrdenar = false\r\n            }else{\r\n                ordenar_lista.setImageResource(R.drawable.ordenar_decrescente)\r\n                imagemOrdenar = true\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/ui/listaTestes/ListaTestesFragment.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
+++ app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/ui/listaTestes/ListaTestesFragment.kt	(date 1622044511189)
@@ -12,16 +12,16 @@
 import kotlinx.android.synthetic.main.fragment_lista_testes.*
 
 import pt.ulusofona.deisi.a2020.cm.g6.R
-import pt.ulusofona.deisi.a2020.cm.g6.data.local.list.TesteSource
 import pt.ulusofona.deisi.a2020.cm.g6.ui.MainActivity
 import pt.ulusofona.deisi.a2020.cm.g6.ui.adapters.TestAdapter
 import pt.ulusofona.deisi.a2020.cm.g6.ui.utils.NavigationManager
 import pt.ulusofona.deisi.a2020.cm.g6.ui.utils.RecyclerItemClickListener
 import pt.ulusofona.deisi.a2020.cm.g6.data.local.room.entities.TesteCovid
+import pt.ulusofona.deisi.a2020.cm.g6.ui.listener.ListaUIListener
 import java.util.*
 
 
-class ListaTestesFragment : Fragment() {
+class ListaTestesFragment : Fragment(), ListaUIListener {
     private lateinit var viewModel: ListaTestesViewModel
     private var testAdapter: TestAdapter? = null
 
@@ -34,7 +34,16 @@
 
     override fun onStart() {
         super.onStart()
-        val listaOrdenada = TesteSource.getAllTeste()
+        viewModel.registerListener(this)
+        viewModel.drawLista()
+        ordenar_lista.setOnClickListener {
+
+        }
+
+    }
+
+    override fun onUpdateUI(listaTestes: List<TesteCovid>) {
+        val listaOrdenada = listaTestes
         var imagemOrdenar = true
 
         list_test.layoutManager = LinearLayoutManager(context as MainActivity)
@@ -63,27 +72,6 @@
                     }
                 })
         )
-
-
-
-
-        ordenar_lista.setOnClickListener {
-            listaOrdenada.reverse()
-            list_test.layoutManager = LinearLayoutManager(context as MainActivity)
-            list_test.adapter = TestAdapter(
-                context as MainActivity,
-                R.layout.teste_item_expression,
-                listaOrdenada
-            )
-            if (imagemOrdenar) {
-                ordenar_lista.setImageResource(R.drawable.ordenar_crescente)
-                imagemOrdenar = false
-            }else{
-                ordenar_lista.setImageResource(R.drawable.ordenar_decrescente)
-                imagemOrdenar = true
-            }
-        }
-
     }
 
 
Index: app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/domain/listaTestes/ListaTestesLogic.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.deisi.a2020.cm.g6.domain.listaTestes\r\n\r\nclass ListaTestesLogic {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/domain/listaTestes/ListaTestesLogic.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
+++ app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/domain/listaTestes/ListaTestesLogic.kt	(date 1622044682663)
@@ -1,4 +1,44 @@
 package pt.ulusofona.deisi.a2020.cm.g6.domain.listaTestes
 
-class ListaTestesLogic {
+import pt.ulusofona.deisi.a2020.cm.g6.data.local.room.entities.TesteCovid
+import pt.ulusofona.deisi.a2020.cm.g6.data.repositories.TesteCovidRepositry
+import pt.ulusofona.deisi.a2020.cm.g6.ui.listener.FetchListaListener
+import pt.ulusofona.deisi.a2020.cm.g6.ui.listener.FetchRepositoryListaListener
+import java.text.SimpleDateFormat
+import java.util.*
+
+class ListaTestesLogic(private val repository: TesteCovidRepositry): FetchRepositoryListaListener {
+
+    var listeners = mutableListOf<FetchListaListener>()
+
+    fun ordenar(listaParaOrdenar: MutableList<TesteCovid>): List<TesteCovid> {
+        val resultado = listaParaOrdenar.sortedBy { it.data.toDate()}
+        return ArrayList<TesteCovid>(resultado)
+    }
+    fun String.toDate(): Date {
+        return SimpleDateFormat("dd-MM-yyyy", Locale.getDefault()).parse(this)
+    }
+
+    fun askListaData(){
+        repository.getListTestesCovid(this)
+    }
+
+    fun registerListener(listener: FetchListaListener){
+        listeners.add(listener)
+    }
+
+    fun unregisterListener(listener: FetchListaListener){
+        listeners.remove(listener)
+    }
+
+    fun notifyListener(listaTestes: List<TesteCovid>){
+        for(i in listeners){
+            i.onDataFetched(listaTestes)
+        }
+    }
+
+    override fun onFetchedRepository(listaTestes: List<TesteCovid>) {
+        notifyListener(listaTestes)
+    }
+
 }
\ No newline at end of file
Index: app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/local/list/TesteSource.kt
===================================================================
--- app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/local/list/TesteSource.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
+++ app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/local/list/TesteSource.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
@@ -1,35 +0,0 @@
-package pt.ulusofona.deisi.a2020.cm.g6.data.local.list
-
-import pt.ulusofona.deisi.a2020.cm.g6.data.local.room.entities.TesteCovid
-import java.text.SimpleDateFormat
-import java.util.*
-
-object TesteSource{
-    var listTestes =mutableListOf(
-        TesteCovid("Farmacia Default 1","12-11-2021",true,""),
-        TesteCovid("Farmacia Default 2","11-1-2021",false,"")
-    )
-
-    fun addTest(test: TesteCovid){
-        listTestes.add(test)
-    }
-
-    fun getAllTeste(): List<TesteCovid> {
-        return ordenar(listTestes)
-    }
-
-    init {
-
-    }
-
-    fun ordenar(listaParaOrdenar: MutableList<TesteCovid>): List<TesteCovid> {
-        val resultado = listaParaOrdenar.sortedBy { it.data.toDate()}
-        return ArrayList<TesteCovid>(resultado)
-    }
-
-    fun String.toDate(): Date{
-        return SimpleDateFormat("dd-MM-yyyy", Locale.getDefault()).parse(this)
-    }
-
-
-}
\ No newline at end of file
Index: app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/CovidData.kt
===================================================================
--- app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/CovidData.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
+++ app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/CovidData.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
@@ -1,101 +0,0 @@
-package pt.ulusofona.deisi.a2020.cm.g6.data
-
-import java.text.SimpleDateFormat
-import java.util.*
-
-class CovidData {
-    var dataPublicacao: String
-    var confirmados: Int = 0
-    var confirmados_arsnorte: Int = 0
-    var confirmados_arscentro: Int = 0
-    var confirmados_arslvt: Int = 0
-    var confirmados_arsalentejo: Int = 0
-    var confirmados_arsalgarve: Int = 0
-    var confirmados_acores: Int = 0
-    var confirmados_madeira: Int = 0
-    var confirmados_novos: Int = 0
-    var recuperados: Int = 0
-    var obitos: Int = 0
-    var internados: Int = 0
-    var internados_uci: Int = 0
-    var novos_obitos: Int = 0
-    var novos_recuperados: Int = 0
-    var novos_internados: Int = 0
-    var novos_confirmados_arsnorte: Int = 0
-    var novos_confirmados_arscentro: Int = 0
-    var novos_confirmados_arslvt: Int = 0
-    var novos_confirmados_arsalentejo: Int = 0
-    var novos_confirmados_arsalgarve: Int = 0
-    var novos_confirmados_acores: Int = 0
-    var novos_confirmados_madeira: Int = 0
-    var listDiasConfirmados: MutableList<Int> = mutableListOf()
-    var listDiasRecuperados: MutableList<Int> = mutableListOf()
-    var listDiasObitos: MutableList<Int> = mutableListOf()
-    var listDiasInternados: MutableList<Int> = mutableListOf()
-
-
-    constructor(data: String) : this() {
-        dataPublicacao = data;
-        getData()
-    }
-
-    constructor() {
-        val date = Calendar.getInstance().time
-        val sdf = SimpleDateFormat("dd-MM-yyyy", Locale.UK)
-        val formatedDate = sdf.format(date)
-        dataPublicacao = formatedDate
-        getData()
-    }
-
-    private fun getData() {
-        confirmados = DataSource().getConfirmados(dataPublicacao)
-        confirmados_arsnorte = DataSource()
-            .getConfirmados_arsnorte(dataPublicacao)
-        confirmados_arscentro = DataSource()
-            .getConfirmados_arscentro(dataPublicacao)
-        confirmados_arslvt = DataSource()
-            .getConfirmados_arslvt(dataPublicacao)
-        confirmados_arsalentejo = DataSource()
-            .getConfirmados_arsalentejo(dataPublicacao)
-        confirmados_arsalgarve = DataSource()
-            .getConfirmados_arsalgarve(dataPublicacao)
-        confirmados_acores = DataSource()
-            .getConfirmados_acores(dataPublicacao)
-        confirmados_madeira = DataSource()
-            .getConfirmados_madeira(dataPublicacao)
-        confirmados_novos = DataSource()
-            .getConfirmados_novos(dataPublicacao)
-        recuperados = DataSource().getRecuperados(dataPublicacao)
-        obitos = DataSource().getObitos(dataPublicacao)
-        internados = DataSource().getInternados(dataPublicacao)
-        internados_uci = DataSource().getInternados_uci(dataPublicacao)
-        novos_obitos = DataSource().getNovos_obitos(dataPublicacao)
-        novos_recuperados = DataSource()
-            .getNovos_recuperados(dataPublicacao)
-        novos_internados = DataSource()
-            .getNovos_internados(dataPublicacao)
-        novos_confirmados_arsnorte = DataSource()
-            .getNovos_confirmados_arsnorte(dataPublicacao)
-        novos_confirmados_arscentro = DataSource()
-            .getNovos_confirmados_arscentro(dataPublicacao)
-        novos_confirmados_arslvt = DataSource()
-            .getNovos_confirmados_arslvt(dataPublicacao)
-        novos_confirmados_arsalentejo = DataSource()
-            .getNovos_confirmados_arsalentejo(dataPublicacao)
-        novos_confirmados_arsalgarve = DataSource()
-            .getNovos_confirmados_arsalgarve(dataPublicacao)
-        novos_confirmados_acores = DataSource()
-            .getNovos_confirmados_acores(dataPublicacao)
-        novos_confirmados_madeira = DataSource()
-            .getNovos_confirmados_madeira(dataPublicacao)
-        listDiasConfirmados = DataSource()
-            .get15DiasConfirmados(dataPublicacao)
-        listDiasRecuperados = DataSource()
-            .get15DiasRecuperados(dataPublicacao)
-        listDiasObitos = DataSource().get15DiasObitos(dataPublicacao)
-        listDiasInternados = DataSource()
-            .get15DiasInternados(dataPublicacao)
-    }
-
-
-}
\ No newline at end of file
Index: app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/DataSource.kt
===================================================================
--- app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/DataSource.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
+++ app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/data/DataSource.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
@@ -1,144 +0,0 @@
-package pt.ulusofona.deisi.a2020.cm.g6.data
-
-class DataSource {
-
-    private var confirmados: Int = 819210;
-
-    private var confirmados_arsnorte: Int = 329923
-    private var confirmados_arscentro: Int = 116873
-    private var confirmados_arslvt: Int = 310443
-    private var confirmados_arsalentejo: Int = 28953
-    private var confirmados_arsalgarve: Int = 20572
-    private var confirmados_acores: Int = 4003
-    private var confirmados_madeira: Int = 8443
-
-    private var confirmados_novos: Int = 575
-    private var recuperados: Int = 769838
-    private var obitos: Int = 16805
-    private var internados: Int = 712
-
-    private var internados_uci: Int = 712
-
-    //Estas variaveis nao estao na base de dados, mas podem ser calculadas com os dados presentes na mesma
-    private var novos_obitos: Int = 156
-    private var novos_recuperados: Int = 147
-    private var novos_internados: Int = 12
-
-    private var novos_confirmados_arsnorte: Int = 120
-    private var novos_confirmados_arscentro: Int = 53
-    private var novos_confirmados_arslvt: Int = 210
-    private var novos_confirmados_arsalentejo: Int = 8
-    private var novos_confirmados_arsalgarve: Int = 10
-    private var novos_confirmados_acores: Int = 12
-    private var novos_confirmados_madeira: Int = 15
-
-
-    fun getConfirmados(data: String): Int {
-        return confirmados;
-    }
-
-    fun getConfirmados_arsnorte(data: String): Int {
-        return confirmados_arsnorte;
-    }
-
-    fun getConfirmados_arscentro(data: String): Int {
-        return confirmados_arscentro;
-    }
-
-    fun getConfirmados_arslvt(data: String): Int {
-        return confirmados_arslvt;
-    }
-
-    fun getConfirmados_arsalentejo(data: String): Int {
-        return confirmados_arsalentejo;
-    }
-
-    fun getConfirmados_arsalgarve(data: String): Int {
-        return confirmados_arsalgarve;
-    }
-
-    fun getConfirmados_madeira(data: String): Int {
-        return confirmados_madeira;
-    }
-
-    fun getConfirmados_acores(data: String): Int {
-        return confirmados_acores;
-    }
-
-    fun getConfirmados_novos(data: String): Int {
-        return confirmados_novos;
-    }
-
-    fun getInternados_uci(data: String): Int {
-        return internados_uci;
-    }
-
-    fun getRecuperados(data: String): Int {
-        return recuperados;
-    }
-
-    fun getObitos(data: String): Int {
-        return obitos;
-    }
-
-    fun getInternados(data: String): Int {
-        return internados;
-    }
-
-    fun getNovos_obitos(data: String): Int {
-        return novos_obitos;
-    }
-
-    fun getNovos_recuperados(data: String): Int {
-        return novos_recuperados;
-    }
-
-    fun getNovos_internados(data: String): Int {
-        return novos_internados;
-    }
-
-    fun getNovos_confirmados_arsnorte(data: String): Int {
-        return novos_confirmados_arsnorte;
-    }
-    fun getNovos_confirmados_arscentro(data: String): Int {
-        return novos_confirmados_arscentro;
-    }
-    fun getNovos_confirmados_arslvt(data: String): Int {
-        return novos_confirmados_arslvt;
-    }
-    fun getNovos_confirmados_arsalentejo(data: String): Int {
-        return novos_confirmados_arsalentejo;
-    }
-    fun getNovos_confirmados_arsalgarve(data: String): Int {
-        return novos_confirmados_arsalgarve;
-    }
-    fun getNovos_confirmados_acores(data: String): Int {
-        return novos_confirmados_acores;
-    }
-    fun getNovos_confirmados_madeira(data: String): Int {
-        return novos_confirmados_madeira;
-    }
-
-    fun get15DiasConfirmados(data: String): MutableList<Int> {
-        return mutableListOf(123,456,345,222,546,112,765,434,212,445,678,323,642,345,521);
-    }
-
-    fun get15DiasRecuperados(data: String): MutableList<Int> {
-        return mutableListOf(223,456,245,159,446,112,654,753,412,322,256,125,456,657,125);
-    }
-
-
-    fun get15DiasObitos(data: String): MutableList<Int> {
-        return mutableListOf(23,56,45,22,46,12,75,44,12,45,68,23,62,45,21);
-    }
-
-
-    fun get15DiasInternados(data: String): MutableList<Int> {
-        return mutableListOf(13,45,34,22,54,11,76,43,21,44,67,32,64,34,52);
-    }
-
-
-
-
-
-}
\ No newline at end of file
Index: app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/domain/registo/RegistoLogic.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.deisi.a2020.cm.g6.domain.registo\r\n\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.local.room.entities.TesteCovid\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.repositories.TesteCovidRepositry\r\n\r\nclass RegistoLogic (private val repository: TesteCovidRepositry) {\r\n\r\n    private var testeCovid: TesteCovid? = null\r\n\r\n    fun addTeste(testeCovid: TesteCovid){\r\n        repository.saveTesteCovid(testeCovid)\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/domain/registo/RegistoLogic.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
+++ app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/domain/registo/RegistoLogic.kt	(date 1622039872693)
@@ -10,7 +10,4 @@
     fun addTeste(testeCovid: TesteCovid){
         repository.saveTesteCovid(testeCovid)
     }
-
-
-
 }
\ No newline at end of file
Index: app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/ui/listener/GraficoUIListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.deisi.a2020.cm.g6.ui.listener\r\n\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.utils.Grafico\r\n\r\ninterface GraficoUIListener {\r\n    fun onUpdateUI(grafico: Grafico){}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/ui/listener/GraficoUIListener.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
+++ app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/ui/listener/GraficoUIListener.kt	(date 1622043999128)
@@ -3,5 +3,5 @@
 import pt.ulusofona.deisi.a2020.cm.g6.ui.utils.Grafico
 
 interface GraficoUIListener {
-    fun onUpdateUI(grafico: Grafico){}
+    fun onUpdateUI(grafico: Grafico)
 }
\ No newline at end of file
Index: app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/domain/graficos/GraficosLogic.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.deisi.a2020.cm.g6.domain.graficos\r\n\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.CovidData\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.repositories.CovidRepository\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.listener.FetchGraficoListener\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.listener.FetchRepositoryGraficoListener\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.utils.Grafico\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\nclass GraficosLogic(private val repository: CovidRepository) : FetchRepositoryGraficoListener{\r\n\r\n    var covidHoje: CovidData = CovidData()\r\n    var listeners = mutableListOf<FetchGraficoListener>()\r\n\r\n    fun getDaysAgo(daysAgo: Int): String {\r\n        val calendar = Calendar.getInstance()\r\n        calendar.add(Calendar.DAY_OF_YEAR, -daysAgo)\r\n        return SimpleDateFormat(\"dd/MM/yyyy\").format(calendar.time)\r\n    }\r\n\r\n    fun getMaxConfirmados(): Int {\r\n        var maxC = 0;\r\n        for (i in covidHoje.listDiasConfirmados){\r\n            if (i > maxC){\r\n                maxC = i;\r\n            }\r\n        }\r\n        return maxC\r\n    }\r\n\r\n    fun getMaxRecuperados(): Int {\r\n        var maxR = 0;\r\n        for (i in covidHoje.listDiasRecuperados){\r\n            if (i > maxR){\r\n                maxR = i;\r\n            }\r\n        }\r\n        return maxR\r\n    }\r\n\r\n    fun getMaxObitos(): Int {\r\n        var maxO = 0;\r\n        for (i in covidHoje.listDiasObitos){\r\n            if (i > maxO){\r\n                maxO = i;\r\n            }\r\n        }\r\n        return maxO\r\n    }\r\n\r\n    fun getMaxInternados(): Int {\r\n        var maxI = 0;\r\n        for (i in covidHoje.listDiasInternados){\r\n            if (i > maxI){\r\n                maxI = i;\r\n            }\r\n        }\r\n        return maxI\r\n    }\r\n\r\n    fun getListDiasConfirmados(): MutableList<Int> {\r\n        return covidHoje.listDiasConfirmados\r\n    }\r\n\r\n    fun getListDiasObitos(): MutableList<Int> {\r\n        return covidHoje.listDiasObitos\r\n    }\r\n\r\n    fun getListDiasInternados(): MutableList<Int> {\r\n        return covidHoje.listDiasInternados\r\n    }\r\n\r\n    fun getListDiasRecuperados(): MutableList<Int> {\r\n        return covidHoje.listDiasRecuperados\r\n    }\r\n\r\n    fun registerListener(listener: FetchGraficoListener){\r\n        listeners.add(listener)\r\n    }\r\n\r\n    fun unregisterListener(listener: FetchGraficoListener){\r\n        listeners.remove(listener)\r\n    }\r\n\r\n    fun notifyListener(grafico: Grafico){\r\n        for(i in listeners){\r\n            i.onDataFetched(grafico)\r\n        }\r\n    }\r\n\r\n    fun askGraphsData(){\r\n        repository.get15DaysDataGraph(this)\r\n    }\r\n\r\n    override fun onFetchedRepository(grafico: Grafico) {\r\n        notifyListener(grafico)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/domain/graficos/GraficosLogic.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
+++ app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/domain/graficos/GraficosLogic.kt	(date 1622044575529)
@@ -1,6 +1,5 @@
 package pt.ulusofona.deisi.a2020.cm.g6.domain.graficos
 
-import pt.ulusofona.deisi.a2020.cm.g6.data.CovidData
 import pt.ulusofona.deisi.a2020.cm.g6.data.repositories.CovidRepository
 import pt.ulusofona.deisi.a2020.cm.g6.ui.listener.FetchGraficoListener
 import pt.ulusofona.deisi.a2020.cm.g6.ui.listener.FetchRepositoryGraficoListener
@@ -10,71 +9,8 @@
 
 class GraficosLogic(private val repository: CovidRepository) : FetchRepositoryGraficoListener{
 
-    var covidHoje: CovidData = CovidData()
     var listeners = mutableListOf<FetchGraficoListener>()
 
-    fun getDaysAgo(daysAgo: Int): String {
-        val calendar = Calendar.getInstance()
-        calendar.add(Calendar.DAY_OF_YEAR, -daysAgo)
-        return SimpleDateFormat("dd/MM/yyyy").format(calendar.time)
-    }
-
-    fun getMaxConfirmados(): Int {
-        var maxC = 0;
-        for (i in covidHoje.listDiasConfirmados){
-            if (i > maxC){
-                maxC = i;
-            }
-        }
-        return maxC
-    }
-
-    fun getMaxRecuperados(): Int {
-        var maxR = 0;
-        for (i in covidHoje.listDiasRecuperados){
-            if (i > maxR){
-                maxR = i;
-            }
-        }
-        return maxR
-    }
-
-    fun getMaxObitos(): Int {
-        var maxO = 0;
-        for (i in covidHoje.listDiasObitos){
-            if (i > maxO){
-                maxO = i;
-            }
-        }
-        return maxO
-    }
-
-    fun getMaxInternados(): Int {
-        var maxI = 0;
-        for (i in covidHoje.listDiasInternados){
-            if (i > maxI){
-                maxI = i;
-            }
-        }
-        return maxI
-    }
-
-    fun getListDiasConfirmados(): MutableList<Int> {
-        return covidHoje.listDiasConfirmados
-    }
-
-    fun getListDiasObitos(): MutableList<Int> {
-        return covidHoje.listDiasObitos
-    }
-
-    fun getListDiasInternados(): MutableList<Int> {
-        return covidHoje.listDiasInternados
-    }
-
-    fun getListDiasRecuperados(): MutableList<Int> {
-        return covidHoje.listDiasRecuperados
-    }
-
     fun registerListener(listener: FetchGraficoListener){
         listeners.add(listener)
     }
Index: app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/ui/registo/RegistoFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.deisi.a2020.cm.g6.ui.registo\r\n\r\nimport android.app.Activity\r\nimport android.app.DatePickerDialog\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.graphics.Bitmap\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.os.Environment\r\nimport android.provider.MediaStore\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.EditText\r\nimport android.widget.RadioButton\r\nimport android.widget.Toast\r\nimport androidx.core.content.FileProvider\r\nimport androidx.core.view.isVisible\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProviders\r\nimport butterknife.ButterKnife\r\nimport butterknife.OnClick\r\nimport kotlinx.android.synthetic.main.fragment_registo.*\r\nimport kotlinx.android.synthetic.main.fragment_registo.view.*\r\nimport pt.ulusofona.deisi.a2020.cm.g6.R\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.local.list.TesteSource\r\nimport pt.ulusofona.deisi.a2020.cm.g6.data.local.room.entities.TesteCovid\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.MainActivity\r\nimport pt.ulusofona.deisi.a2020.cm.g6.ui.utils.NavigationManager\r\nimport java.io.File\r\nimport java.io.IOException\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport kotlin.jvm.Throws\r\n\r\n\r\nclass RegistoFragment : Fragment() {\r\n\r\n    private lateinit var viewModel: RegistoViewModel\r\n    val testeSubmete: TesteCovid = TesteCovid()\r\n\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_registo, container, false)\r\n        viewModel = ViewModelProviders.of(this).get(RegistoViewModel::class.java)\r\n        ButterKnife.bind(this, view)\r\n        return view\r\n    }\r\n\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n\r\n        dataTeste.setOnClickListener {\r\n           hideKeyboard(dataTeste)\r\n            showPicker()\r\n        }\r\n\r\n        button_camera.setOnClickListener {\r\n            println(\"button camera\")\r\n            dispatchTakePictureIntent()\r\n        }\r\n\r\n    }\r\n\r\n    var currentPhotoPath: String? = null\r\n\r\n    @Throws(IOException::class)\r\n    private fun createImageFile(): File {\r\n        // Create an image file name\r\n        val timeStamp: String = SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(Date())\r\n        val storageDir: File = activity?.getExternalFilesDir(Environment.DIRECTORY_PICTURES)!!\r\n        return File.createTempFile(\r\n            \"JPEG_${timeStamp}_\", /* prefix */\r\n            \".jpg\", /* suffix */\r\n            storageDir /* directory */\r\n        ).apply {\r\n            // Save a file: path for use with ACTION_VIEW intents\r\n            currentPhotoPath = absolutePath\r\n        }\r\n    }\r\n\r\n    val REQUEST_IMAGE_CAPTURE = 1\r\n     var photoURIFinal: Uri? = null\r\n    private fun dispatchTakePictureIntent() {\r\n        Intent(MediaStore.ACTION_IMAGE_CAPTURE).also { takePictureIntent ->\r\n            // Ensure that there's a camera activity to handle the intent\r\n            takePictureIntent.resolveActivity(activity?.packageManager!!)?.also {\r\n                // Create the File where the photo should go\r\n                val photoFile: File? = try {\r\n                    createImageFile()\r\n                } catch (ex: IOException) {\r\n                    // Error occurred while creating the File\r\n                    null\r\n                }\r\n                // Continue only if the File was successfully created\r\n                photoFile?.also {\r\n                    val photoURI: Uri = FileProvider.getUriForFile(\r\n                        requireContext(),\r\n                        \"pt.ulusofona.deisi.a2020.cm.g6\",\r\n                        it\r\n                    )\r\n                    photoURIFinal = photoURI\r\n                    println(photoURIFinal)\r\n                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI)\r\n                    startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @OnClick(R.id.submeterTeste)\r\n    fun onSubmeterTesteNovoClick(){\r\n        var check = true\r\n        val editLocal = localTeste\r\n        val editData = dataTeste\r\n        val editPositivo = radio_positivo\r\n        val editNegativo = radio_negativo\r\n        val editResultados = escolhaResultados\r\n        val editLocalString: String = editLocal.text.toString()\r\n        val editDataString: String = editData.text.toString()\r\n\r\n        if (editLocalString == \"\" || editLocalString.isEmpty()) {\r\n            editLocal.setError(getString(R.string.localTesteErro))\r\n            check = false\r\n        }\r\n\r\n        if (editDataString == \"\" || editDataString.isEmpty()) {\r\n            editData.setError(getString(R.string.dataTesteErro))\r\n            check = false\r\n        }\r\n\r\n        if (!(editPositivo.isChecked()) && !(editNegativo.isChecked())) {\r\n            editResultados.resultadoTesteErro.isVisible = true\r\n            check = false\r\n        }\r\n\r\n        if ((editPositivo.isChecked()) || (editNegativo.isChecked())) {\r\n            editResultados.resultadoTesteErro.isVisible = false\r\n        }\r\n\r\n        if (check) {\r\n            testeSubmete.local = editLocalString\r\n            testeSubmete.data = editDataString\r\n            if(photoURIFinal != null){\r\n                testeSubmete.fotoPath = photoURIFinal.toString()\r\n            }\r\n            TesteSource.addTest(testeSubmete)\r\n            viewModel.onSubmeterTesteNovo(testeSubmete)\r\n            Toast.makeText(\r\n                context as MainActivity,\r\n                getString(R.string.testeSubmetido),\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n            activity?.let { NavigationManager.goToListTestes(it.supportFragmentManager) }\r\n        }\r\n    }\r\n\r\n\r\n    @OnClick(R.id.radio_positivo, R.id.radio_negativo)\r\n    fun onRadioButtonClicked(view: View) {\r\n        if (view is RadioButton) {\r\n            val checked = view.isChecked\r\n\r\n            when (view.getId()) {\r\n                R.id.radio_positivo ->\r\n                    if (checked) {\r\n                        testeSubmete.resultadoTesteCovid = true\r\n                    } else {\r\n                        radio_positivo.setError(getString(R.string.resultadoTesteErro))\r\n                    }\r\n\r\n                R.id.radio_negativo ->\r\n                    if (checked) {\r\n                        testeSubmete.resultadoTesteCovid = false\r\n                    } else {\r\n                        radio_negativo.setError(getString(R.string.resultadoTesteErro))\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun showPicker() {\r\n        val picker: DatePickerDialog?\r\n        val editDate: EditText? = dataTeste\r\n        val calendar: Calendar = Calendar.getInstance()\r\n        val dia: Int = calendar.get(Calendar.DAY_OF_MONTH)\r\n        val mes: Int = calendar.get(Calendar.MONTH)\r\n        val ano: Int = calendar.get(Calendar.YEAR)\r\n\r\n\r\n        picker = DatePickerDialog(\r\n            context as MainActivity,\r\n            DatePickerDialog.OnDateSetListener { _, year, monthOfYear, dayOfMonth ->\r\n                editDate!!.setText(\"\" + dayOfMonth + \"-\" + (monthOfYear + 1) + \"-\" + year)\r\n            },\r\n            ano,\r\n            mes,\r\n            dia\r\n        )\r\n\r\n        picker.show()\r\n\r\n    }\r\n\r\n\r\n   /* fun submeterTeste() {\r\n        var check = true\r\n        val editLocal = localTeste\r\n        val editData = dataTeste\r\n        val editPositivo = radio_positivo\r\n        val editNegativo = radio_negativo\r\n        val editResultados = escolhaResultados\r\n        val editLocalString: String = editLocal.text.toString()\r\n        val editDataString: String = editData.text.toString()\r\n\r\n        if (editLocalString == \"\" || editLocalString.isEmpty()) {\r\n            editLocal.setError(getString(R.string.localTesteErro))\r\n            check = false\r\n        }\r\n\r\n        if (editDataString == \"\" || editDataString.isEmpty()) {\r\n            editData.setError(getString(R.string.dataTesteErro))\r\n            check = false\r\n        }\r\n\r\n        if (!(editPositivo.isChecked()) && !(editNegativo.isChecked())) {\r\n            editResultados.resultadoTesteErro.isVisible = true\r\n            check = false\r\n        }\r\n\r\n        if ((editPositivo.isChecked()) || (editNegativo.isChecked())) {\r\n            editResultados.resultadoTesteErro.isVisible = false\r\n        }\r\n\r\n        if (check) {\r\n            testeSubmete.local = editLocalString\r\n            testeSubmete.data = editDataString\r\n            TesteSource.addTest(testeSubmete)\r\n            Toast.makeText(\r\n                context as MainActivity,\r\n                getString(R.string.testeSubmetido),\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n            activity?.let { NavigationManager.goToListTestes(it.supportFragmentManager) }\r\n        }\r\n\r\n\r\n    }*/\r\n\r\n    fun hideKeyboard(view: View){\r\n        val inputMethodManager = context?.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\r\n        inputMethodManager.hideSoftInputFromWindow(view.windowToken, 0)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/ui/registo/RegistoFragment.kt	(revision b7ca13f299bfb11e84df2f48ba18b4b36e7777ae)
+++ app/src/main/java/pt/ulusofona/deisi/a2020/cm/g6/ui/registo/RegistoFragment.kt	(date 1622044575537)
@@ -2,9 +2,7 @@
 
 import android.app.Activity
 import android.app.DatePickerDialog
-import android.content.Context
 import android.content.Intent
-import android.graphics.Bitmap
 import android.net.Uri
 import android.os.Bundle
 import android.os.Environment
@@ -25,7 +23,6 @@
 import kotlinx.android.synthetic.main.fragment_registo.*
 import kotlinx.android.synthetic.main.fragment_registo.view.*
 import pt.ulusofona.deisi.a2020.cm.g6.R
-import pt.ulusofona.deisi.a2020.cm.g6.data.local.list.TesteSource
 import pt.ulusofona.deisi.a2020.cm.g6.data.local.room.entities.TesteCovid
 import pt.ulusofona.deisi.a2020.cm.g6.ui.MainActivity
 import pt.ulusofona.deisi.a2020.cm.g6.ui.utils.NavigationManager
@@ -152,7 +149,6 @@
             if(photoURIFinal != null){
                 testeSubmete.fotoPath = photoURIFinal.toString()
             }
-            TesteSource.addTest(testeSubmete)
             viewModel.onSubmeterTesteNovo(testeSubmete)
             Toast.makeText(
                 context as MainActivity,
@@ -211,51 +207,6 @@
 
     }
 
-
-   /* fun submeterTeste() {
-        var check = true
-        val editLocal = localTeste
-        val editData = dataTeste
-        val editPositivo = radio_positivo
-        val editNegativo = radio_negativo
-        val editResultados = escolhaResultados
-        val editLocalString: String = editLocal.text.toString()
-        val editDataString: String = editData.text.toString()
-
-        if (editLocalString == "" || editLocalString.isEmpty()) {
-            editLocal.setError(getString(R.string.localTesteErro))
-            check = false
-        }
-
-        if (editDataString == "" || editDataString.isEmpty()) {
-            editData.setError(getString(R.string.dataTesteErro))
-            check = false
-        }
-
-        if (!(editPositivo.isChecked()) && !(editNegativo.isChecked())) {
-            editResultados.resultadoTesteErro.isVisible = true
-            check = false
-        }
-
-        if ((editPositivo.isChecked()) || (editNegativo.isChecked())) {
-            editResultados.resultadoTesteErro.isVisible = false
-        }
-
-        if (check) {
-            testeSubmete.local = editLocalString
-            testeSubmete.data = editDataString
-            TesteSource.addTest(testeSubmete)
-            Toast.makeText(
-                context as MainActivity,
-                getString(R.string.testeSubmetido),
-                Toast.LENGTH_SHORT
-            ).show()
-            activity?.let { NavigationManager.goToListTestes(it.supportFragmentManager) }
-        }
-
-
-    }*/
-
     fun hideKeyboard(view: View){
         val inputMethodManager = context?.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager
         inputMethodManager.hideSoftInputFromWindow(view.windowToken, 0)
